---
layout: darkly
title: iOS 业务逻辑分层 
---

```
我们现在的逻辑应该分为这三层: 
 		- 数据层
 		- 交互层
 		- 刷新层

 	例如: row 负责数据层数据,  vc 负责交互层, view 负责刷新层(提供刷新的API)
 
 	数据层拥有视图需要的全部数据, 以及处理能力
 	交互层可以修改数据层的数据, 并可调用刷新层的API
 	刷新层刷新变更后的数据

 	--- ---- - -- - - - - - - --  -- -- -- - --

 	把一个视图从当前的父视图中移除, 添加到了另一个父视图中 这个逻辑是交互层逻辑, 还是刷新层逻辑?
 
 	--- ---- - -- - - - - - - --  -- -- -- - --
 
 	交互层
 
 	--- ---- - -- - - - - - - --  -- -- -- - --
```

___


```
经过很长时间的摸索, 发现我们App中需要有一个服务中心的概念. 它可以提供路由服务以及功能服务.

- 路由服务: 界面之间的跳转. 
- 功能服务: 不属于路由的服务. 

为什么要有功能服务?

由于路由服务提供的是页面跳转功能, 它无法提供某个功能服务. 例如调起下载, 图片上传等功能. 这些功能暂时归到功能服务中, 等之后的功能服务不得不拆分为其他服务时, 进行优化. 

我可能要让功能服务的调起方式和路由服务要一致了.
这会使功能服务对调用者来说, 方式和发起一个路由请求一样.
同时这种方式兼容了项目里的老路由了. 

现将所有请求定义为 服务请求. 每个服务都必须具有一个唯一的key, 以使用它来调起服务.
服务中心对外处理这些服务请求, 内部由路由服务优先处理, 也就是当可以处理该请求时, 则交给路由服务处理. 否则转交给功能服务处理, 如果功能服务也无法处理, 则执行`unhandledCallback`.

服务请求应该包含哪些属性及接口?
- 请求的服务
- 请求的参数
- 请求完成后的回调

```








