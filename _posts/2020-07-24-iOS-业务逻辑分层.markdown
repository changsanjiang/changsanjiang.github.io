---
layout: darkly
title: iOS 业务逻辑分层 
tag: test
---

```
我们现在的逻辑应该分为这三层: 
 		- 数据层
 		- 交互层
 		- 刷新层

 	例如: row 负责数据层数据,  vc 负责交互层, view 负责刷新层(提供刷新的API)
 
 	数据层拥有视图需要的全部数据, 以及处理能力
 	交互层可以修改数据层的数据, 并可调用刷新层的API
 	刷新层刷新变更后的数据

 	--- ---- - -- - - - - - - --  -- -- -- - --

 	把一个视图从当前的父视图中移除, 添加到了另一个父视图中 这个逻辑是交互层逻辑, 还是刷新层逻辑?
 
 	--- ---- - -- - - - - - - --  -- -- -- - --
 
 	交互层
 
 	--- ---- - -- - - - - - - --  -- -- -- - --
```

___


```
经过很长时间的摸索, 发现我们App中需要有一个服务中心的概念. 它可以提供路由服务以及功能服务.

- 路由服务(RouteServices): 界面之间的跳转. 
- 功能服务(FeatureServices): 不属于路由的服务. 

为什么要有功能服务?

由于路由服务提供的是页面跳转功能, 它无法提供某个功能服务. 例如调起下载, 图片上传等功能. 这些功能暂时归到功能服务中, 等之后的功能服务不得不拆分为其他服务时, 进行优化. 

因此, 服务中心需提供以下场景的功能:

	- 获取实例
	- 页面跳转
	- 其他功能服务

 	--- ---- - -- - - - - - - --  -- -- -- - --

		我可能要让功能服务的调起方式和路由服务要一致了.
		这会使功能服务对调用者来说, 方式和发起一个路由请求一样.
		这种方式兼容项目里的老路由了. 

 	--- ---- - -- - - - - - - --  -- -- -- - --

现将所有请求定义为 服务请求. 每个服务都必须具有一个唯一的key, 以使用它来调起服务.

服务中心执行一个请求的具体流程?

	由于每个服务都有一个唯一的key, 所以:
		- 通过请求服务的key, 服务中心首先查找是否存在对应的服务, 如果存在则执行对应服务, 不存在则执行`unhandledCallback`.


服务请求应该包含哪些属性及接口?

	- 请求的服务
	- 请求的参数
	- 请求完成后的回调


关于功能模块的注册:
	
	- 由各个模块自己注册. 将对外提供的服务注册进服务中心.
	- 对于其他情况下的注册, 暂定提供一个pod库来专门做这件事情. 这个库在初期可能会被频繁的修改. 

```


















